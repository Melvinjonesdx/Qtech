import numpy as np
from qiskit import Aer
from qiskit.providers.aer import AerSimulator
from qiskit.algorithms.optimizers import SPSA
from qiskit.algorithms import VQE
from qiskit.circuit.library import TwoLocal
from qiskit.opflow import PauliSumOp
import matplotlib.pyplot as plt
Pauli_I = np.array([[1, 0], [0, 1]])
Pauli_X = np.array([[0, 1], [1, 0]])
Pauli_Y = np.array([[0, -1j], [1j, 0]])
Pauli_Z = np.array([[1, 0], [0, -1]])

# Define the terms and coefficients of the Hamiltonian
hamiltonian_terms = [
    (0.00698131079425246, np.kron(np.kron(Pauli_I, Pauli_I), np.kron(Pauli_I, Pauli_Z))),
    (-0.0004978294000830275, np.kron(np.kron(Pauli_I, Pauli_I), np.kron(Pauli_Z, Pauli_I))),
    (+4.664512584628966e-05, np.kron(np.kron(Pauli_I, Pauli_Z), np.kron(Pauli_I, Pauli_I))),
    (+0.0004303465157577957, np.kron(np.kron(Pauli_Z, Pauli_I), np.kron(Pauli_I, Pauli_I))),
    (+0.5099539391488543 , np.kron(np.kron(Pauli_I, Pauli_Z), np.kron(Pauli_I, Pauli_Z))),
    (+0.5099677387273946, np.kron(np.kron(Pauli_I, Pauli_Z), np.kron(Pauli_I, Pauli_Z))),
    (+0.5099488492845516, np.kron(np.kron(Pauli_I, Pauli_Z), np.kron(Pauli_Z, Pauli_I))),
    (+0.5099106232913859 , np.kron(np.kron(Pauli_Z, Pauli_I), np.kron(Pauli_I, Pauli_Z))),
    (+0.5099467089998899, np.kron(np.kron(Pauli_Z, Pauli_I), np.kron(Pauli_Z, Pauli_I))),
    (+0.5099046167492709, np.kron(np.kron(Pauli_Z, Pauli_Z), np.kron(Pauli_I, Pauli_I)))
]
# Create the Hamiltonian matrix
num_qubits = 4
hamiltonian_matrix = np.zeros((2 ** num_qubits, 2 ** num_qubits), dtype=complex)

for coeff, term_matrix in hamiltonian_terms:
    hamiltonian_matrix += coeff * term_matrix

# Find the eigenvalues using numpy
eigenvalues = np.linalg.eigvals(hamiltonian_matrix)

# Print the eigenvalues
#for i, eigenvalue in enumerate(eigenvalues):
    #print(f"Eigenvalue {i+1}: {eigenvalue.real}")

# Define the number of qubits and the ansatz parameters

ansatz = TwoLocal(num_qubits, "ry", "cz", reps=3, entanglement="full")
optimizer = SPSA(maxiter=100)
vqe = VQE(
    ansatz=ansatz,
    optimizer=optimizer,
    quantum_instance=AerSimulator(method="statevector"),
)
result = vqe.compute_minimum_eigenvalue(operator=hamiltonian)
ground_state_energy = result.eigenvalue.real
print("Ground-State Energy:", ground_state_energy)
num_atoms = num_qubits
ground_state_energy_per_atom = ground_state_energy / num_atoms
print("Ground-State Energy per Atom:", ground_state_energy_per_atom)
